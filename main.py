import os
import time
import base64
import urllib3
from zeep import Client
from zeep.transports import Transport
from zeep.exceptions import Fault
import requests

from libs.schemas import SimpleCheckResult, Service, Source, Author, LoanBlock
from libs.logger import logger

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class AntiplagiatClient:
    def __init__(self, login,
                 password,
                 company_name,
                 apicorp_address="api.antiplagiat.ru:4959",
                 antiplagiat_uri="https://testapi.antiplagiat.ru"):
        self.antiplagiat_uri = antiplagiat_uri
        self.login = login
        self.password = password
        self.company_name = company_name
        self.apicorp_address = apicorp_address

        wsdl_url = f'https://{self.apicorp_address}/apiCorp/{self.company_name}?singleWsdl'

        session = requests.Session()
        session.verify = False
        session.auth = (self.login, self.password)

        transport = Transport(session=session)
        self.client = Client(wsdl=wsdl_url, transport=transport)
        self.factory = self.client.type_factory('ns0')
        print("SOAP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")

    def _get_doc_data(self, filename: str, external_user_id: str):
        return self.factory.DocData(
            Data=base64.b64encode(open(filename, "rb").read()).decode(),
            FileName=os.path.splitext(filename)[0],
            FileType=os.path.splitext(filename)[1],
            ExternalUserID=external_user_id
        )

    def add_to_index(self, filename: str, author_surname: str = '',
                     author_other_names: str = '',
                     external_user_id: str = 'ivanov',
                     custom_id: str = 'original') -> object:
        logger.info(f"Indexing document: {filename}")
        data = self._get_doc_data(filename, external_user_id=external_user_id)

        person_ids = self.factory.PersonIDs(CustomID=custom_id)
        docatr = self.factory.DocAttributes()
        arr = self.factory.ArrayOfAuthorName()
        author = self.factory.AuthorName(
            OtherNames=author_other_names,
            Surname=author_surname,
            PersonIDs=person_ids
        )
        arr.AuthorName.append(author)
        docatr.DocumentDescription = {'Authors': arr}

        try:
            upload_result = self.client.service.UploadDocument(data, docatr)
        except Fault as e:
            logger.error(f"SOAP Fault during upload: {e}")
            raise
        except Exception:
            logger.exception("Failed to upload document")
            raise

        try:
            uploaded = upload_result.Uploaded[0]
        except (AttributeError, IndexError):
            uploaded = upload_result[0]

        def get_id(obj):
            if hasattr(obj, 'Id'):
                return obj.Id
            if isinstance(obj, dict) and 'Id' in obj:
                return obj['Id']
            return obj

        doc_id_val = get_id(get_id(uploaded))

        doc_id = self.factory.DocumentId(Id=doc_id_val, External=None)
        logger.info(f"Indexed document ID: {doc_id_val}")

        return doc_id

    def check_by_id(self, doc_id: object) -> dict:
        logger.info(f"Starting check for document ID: {doc_id.Id}")

        try:
            self.client.service.CheckDocument(doc_id)
        except Fault as e:
            logger.error(f"SOAP Fault during check start: {e}")
            raise

        status = self.client.service.GetCheckStatus(doc_id)
        while status.Status == "InProgress":
            time.sleep(status.EstimatedWaitTime * 0.1)
            status = self.client.service.GetCheckStatus(doc_id)

        if status.Status == "Failed":
            logger.error(f"An error occurred while validating the document ID {doc_id.Id}: {status.FailDetails}")

        report = self.client.service.GetReportView(doc_id)
        logger.info(f"Report Summary: {report.Summary.Score:.2f}%")

        result = SimpleCheckResult(
            filename='',
            plagiarism_score=f'{report.Summary.Score:.2f}%',
            services=[],
            author=Author(surname="", other_names="", custom_id=""),  # üëà –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ!
            loan_blocks=[]
        )


        for checkService in getattr(report, 'CheckServiceResults', []) or []:
            service = Service(
                name=checkService.CheckServiceName,
                originality=f'{checkService.ScoreByReport.Legal:.2f}%',
                plagiarism=f'{checkService.ScoreByReport.Plagiarism:.2f}%',
                sources=[]
            )

            logger.info(
                f"Check service: {checkService.CheckServiceName}, "
                f"Score.White={checkService.ScoreByReport.Legal:.2f}% "
                f"Score.Black={checkService.ScoreByReport.Plagiarism:.2f}%"
            )

            for source in getattr(checkService, 'Sources', []) or []:
                _source = Source(
                    hash=source.SrcHash,
                    score_by_report=f'{source.ScoreByReport:.2f}%',
                    score_by_source=f'{source.ScoreBySource:.2f}%',
                    name=source.Name,
                    author=source.Author,
                    url=source.Url
                )

                service.sources.append(_source)

                logger.info(
                    f'\t{source.SrcHash}: Score={source.ScoreByReport:.2f}%({source.ScoreBySource:.2f}%), '
                    f'Name="{source.Name}" Author="{source.Author}" Url="{source.Url}"'
                )

            result.services.append(service)

        options = self.factory.ReportViewOptions(
            FullReport=True,
            NeedText=True,
            NeedStats=True,
            NeedAttributes=True
        )

        fullreport = self.client.service.GetReportView(doc_id, options)

        author_info = fullreport.Attributes.DocumentDescription.Authors.AuthorName[0]
        result.author.surname = author_info.Surname
        result.author.other_names = author_info.OtherNames
        result.author.custom_id = author_info.PersonIDs.CustomID

        loan_blocks = []
        for block in getattr(fullreport.Details, 'CiteBlocks', []) or []:
            text = fullreport.Details.Text[block.Offset:block.Offset + block.Length]
            loan_block = LoanBlock(
                text=text,
                offset=block.Offset,
                length=block.Length
            )
            loan_blocks.append(loan_block)

        result.loan_blocks = loan_blocks

        return result.model_dump()

if __name__ == "__main__":
    client = AntiplagiatClient(
        login="testapi@antiplagiat.ru",
        password="testapi",
        company_name="testapi"
    )

    while True:
        print("\n$____________________–ú–µ–Ω—é____________________$")
        print("1. –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç;")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ id;")
        print("3. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç;")
        print("0. –í—ã—Ö–æ–¥.")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ")
        if choice == '1':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: ")
            author_surname = input("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞: ")
            author_other_names = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞: ")
            external_user_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
            custom_id = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID (custom_id): ")
            try:
                doc_id = client.add_to_index(
                    filename,
                    author_surname=author_surname,
                    author_other_names=author_other_names,
                    external_user_id=external_user_id,
                    custom_id=custom_id
                )
                print(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ –∏–Ω–¥–µ–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_id.Id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")

        elif choice == '2':
            raw_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "))
            doc_id = client.factory.DocumentId(Id=raw_id, External=None)
            try:
                report = client.check_by_id(doc_id)
                print("\n–û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–∞–≥–∏–∞—Ç–∞: {report['plagiarism_score']}")
                print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:")
                for svc in report['services']:
                    print(f"–°–µ—Ä–≤–∏—Å: {svc['name']}")
                    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {svc['originality']}")
                    print(f"–ü–ª–∞–≥–∏–∞—Ç: {svc['plagiarism']}")
                    if svc['sources']:
                        print("    –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                        for src in svc['sources']:
                            print(f"      - {src['name']} ({src['url']})")
                            print(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –æ—Ç—á–µ—Ç—É: {src['score_by_report']}")
                            print(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É: {src['score_by_source']}")
                print(f"\n–ê–≤—Ç–æ—Ä: {report['author']['surname']} {report['author']['other_names']} (custom_id: {report['author']['custom_id']})")
                if report['loan_blocks']:
                    print("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞:")
                    for i, block in enumerate(report['loan_blocks'], 1):
                        print(f"–ë–ª–æ–∫ {i}:")
                        print(f"Offset: {block['offset']}, –¥–ª–∏–Ω–∞: {block['length']}")
                        print(f"–¢–µ–∫—Å—Ç: {block['text'][:100]}..." if len(block['text']) > 100 else f"    –¢–µ–∫—Å—Ç: {block['text']}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


        elif choice == '3':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ")
            author_surname = input("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞: ")
            author_other_names = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞: ")
            external_user_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
            custom_id = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID (custom_id): ")
            try:
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç DocumentId
                doc_id = client.add_to_index(
                    filename,
                    author_surname=author_surname,
                    author_other_names=author_other_names,
                    external_user_id=external_user_id,
                    custom_id=custom_id
                )
                print(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å —Å ID: {doc_id.Id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                report = client.check_by_id(doc_id)
                print("\n–û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–∞–≥–∏–∞—Ç–∞: {report['plagiarism_score']}")
                print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:")
                for svc in report['services']:
                    print(f"–°–µ—Ä–≤–∏—Å: {svc['name']}")
                    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {svc['originality']}")
                    print(f"–ü–ª–∞–≥–∏–∞—Ç: {svc['plagiarism']}")
                    if svc['sources']:
                        print("–ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                        for src in svc['sources']:
                            print(f"      - {src['name']} ({src['url']})")
                            print(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –æ—Ç—á–µ—Ç—É: {src['score_by_report']}")
                            print(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É: {src['score_by_source']}")
                print(f"\n–ê–≤—Ç–æ—Ä: {report['author']['surname']} {report['author']['other_names']} (custom_id: {report['author']['custom_id']})")
                if report['loan_blocks']:
                    print("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞:")
                    for i, block in enumerate(report['loan_blocks'], 1):
                        print(f"–ë–ª–æ–∫ {i}:")
                        print(f"Offset: {block['offset']}, –¥–ª–∏–Ω–∞: {block['length']}")
                        print(f"–¢–µ–∫—Å—Ç: {block['text'][:100]}..." if len(block['text']) > 100 else f"    –¢–µ–∫—Å—Ç: {block['text']}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

        elif choice == '0':
            print("–í—ã—Ö–æ–¥...")
            break

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")